services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7
    command: ["redis-server", "--save", "", "--appendonly", "no",
              "--maxmemory", "${REDIS_MAXMEMORY}",
              "--maxmemory-policy", "${REDIS_POLICY}"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  storage-api:
    build: ./services/storage-api
    env_file: [.env]
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8001"
    volumes:
      - ./data:/data:ro
    healthcheck:
      # chequea /health interno
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8001/health', timeout=2).status==200 else 1)\""]
      interval: 5s
      timeout: 3s
      retries: 20

  cache-service:
    build: ./services/cache-service
    env_file: [.env]
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8002:8002"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8002/health', timeout=2).status==200 else 1)\""]
      interval: 5s
      timeout: 3s
      retries: 20

  responder-llm:
    build: ./services/responder-llm
    env_file: [.env]
    environment:
      # --- LLM config (forzamos inglés y Gemini v1) ---
      LLM_MODE: GEMINI
      LLM_LANG: en                # << respuestas en inglés
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL: gemini-2.5-flash
      GEMINI_API_VERSION: v1
    ports:
      - "8003:8003"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8003/health', timeout=2).status==200 else 1)\""]
      interval: 5s
      timeout: 3s
      retries: 20


  scorer:
    build: ./services/scorer
    env_file: [.env]
    ports:
      - "8004:8004"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8004/health', timeout=2).status==200 else 1)\""]
      interval: 5s
      timeout: 3s
      retries: 20

  traffic-gen:
    build: ./services/traffic-gen
    env_file: [.env]
    environment:
      PYTHONUNBUFFERED: "1"   # logs al instante
      TOTAL_REQUESTS: ${TOTAL_REQUESTS:-1000}
      TRAFFIC_DIST: ${TRAFFIC_DIST:-poisson}
      BASE_RATE_RPS: ${BASE_RATE_RPS:-20}
      DURATION_SECONDS: ${DURATION_SECONDS:-50}
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-21600}
    depends_on:
      storage-api:
        condition: service_healthy
      cache-service:
        condition: service_healthy
      responder-llm:
        condition: service_healthy
      scorer:
        condition: service_healthy

volumes:
  pgdata:
